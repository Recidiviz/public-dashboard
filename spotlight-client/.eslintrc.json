{
  "env": {
    "browser": true,
    "jest": true
  },
  "extends": [
    // explicitly extending the base config so we don't override its own "extends" field
    "../.eslintrc.json"
  ],
  "overrides": [
    {
      "extends": [
        // From @typescript-eslint/eslint-plugin
        "plugin:@typescript-eslint/recommended",
        // From eslint-config-prettier
        "prettier/@typescript-eslint"
      ],
      "files": ["**.ts", "**.tsx"],
      "parser": "@typescript-eslint/parser",
      "rules": {
        // with static typing this rule is not so useful
        "consistent-return": "off",
        // these bare ESLint rules are superseded by TS equivalents
        "no-use-before-define": "off",
        "@typescript-eslint/no-use-before-define": ["error"],
        "no-shadow": "off",
        "@typescript-eslint/no-shadow": "error",

        // TypeScript is largely redundant with PropTypes
        "react/prop-types": "off"
      }
    }
  ],

  "plugins": ["@typescript-eslint"],
  "rules": {
    // This is a living list! If an eslint rule does more harm than good, just
    // add it below to override it. Write a comment above each rule explaining
    // why the exception is made, so we know whether to keep it in the future.

    // don't require extensions for typescript modules
    "import/extensions": [
      "error",
      "always",
      { "js": "never", "ts": "never", "tsx": "never" }
    ],

    // make sure we are using the Babel macro for styled-components
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "styled-components",
            "message": "Please import from styled-components/macro."
          },
          {
            "name": "react-spring",
            "message": "For IE 11 support, please import from react-spring/web.cjs"
          }
        ]
      }
    ],

    // support typescript as well as javascript file extensions
    "react/jsx-filename-extension": ["error", { "extensions": [".tsx", ".js"] }]
  },
  "settings": {
    "import/resolver": {
      // use <root>/tsconfig.json
      "typescript": {
        // always try to resolve types under `<root>@types` directory
        // even it doesn't contain any source code, like `@types/unist`
        "alwaysTryTypes": true
      }
    }
  }
}
